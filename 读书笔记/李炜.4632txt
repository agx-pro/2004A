## ***\*D\*******\*OM\****

概念：文档对象模型（DOM，Document Object Model）是一个应用编程 接口（API），用于在HTML中使用扩展的XML

DOM级别：

\1. 1998年10月，DOM Level 1成为W3C的推荐标准。这个规范由两 个模块组成：DOM Core和DOM HTML。

\2. DOM Level 2新增了以下模块，以支持新的接口。

DOM视图：描述追踪文档不同视图（如应用CSS样式前后的 文档）的接口。 DOM事件：描述事件及事件处理的接口。 DOM样式：描述处理元素CSS样式的接口。 DOM遍历和范围：描述遍历和操作DOM树的接口。

\3. W3C不再按照Level来维护DOM了，而是作为DOM Living Standard来维护，其快照称为DOM4。

## ***\*B\*******\*OM\****

概念：

IE3和Netscape Navigator 3提供了浏览器对象模型（BOM） API， 用于支持访问和操作浏览器的窗口

人们通常会把任何特定于浏览器的扩展都归在BOM的范畴内 例如：

\1. 弹出新浏览器窗口的能力；

\2. 移动、缩放和关闭浏览器窗口的能力； 

3． navigator 对象，提供关于浏览器的详尽信息；

\4.  location 对象，提供浏览器加载页面的详尽信息；

\5.  screen 对象，提供关于用户屏幕分辨率的详尽信息；

\6.  performance 对象，提供浏览器内存占用、导航行为和时间统 计的详尽信息；

\7.  对cookie的支持； 

\8.  其他自定义对象，如 XMLHttpRequest 和IE的 ActiveXObject 。

## ***\*<script>元素\****

<script> 元素有下列8个属性。1.  async ：可选。

\2.  charset ：可选。

\3.  crossorigin ：可选。

\4.  defer ：可选。

\5.  integrity ：可选。

\6.  language ：废弃。

\7.  src ：可选。

\8.  type ：可选。

使用方法：

使用 <script> 的方式有两种：通过它直接在网页中嵌入

JavaScript代码，以及通过它在网页中包含外部JavaScript文件。

要嵌入行内JavaScript代码，直接把代码放在 <script> 元素中

就行：例如：<script>

function sayHi() {

console.log("Hi!");

}

</script>

注：1. 在使用行内JavaScript代码时，要注意代码中不能出现字符串 。

2浏览器解析行内脚本的方式决定了它在看到字符串 时，会将其当成结束的 标签。想避免这个问题，只需要 转义字符“\”1即可

语言基础
语法 区分大小写 
首先要知道的是，ECMAScript中一切都区分大小写。 变量 test 和变 量 Test 是两个不同的变量。
标识符  就是变量、函数、属性或函数参数的名称。
注释   ECMAScript采用C语言风格的注释，包括单行注释和块注释。单 行注释以两个斜杠字符开头 
严格模式   ECMAScript 5增加了严格模式（strict mode）的概念
语句  ECMAScript中的语句以分号结尾。 省略分号意味着由解析器确定 语句在哪里结尾
if之类的控制语句只在执行多条语句时要求必须有代码块。

关键字与保留字
规范中也描述了一组未来的保留字，同样不能用作标识符或属性 名。
变量
ECMAScript变量是松散类型的，意思是变量可以用于保存任何类 型的数据。
每个变量只不过是一个用于保存任意值的命名占位符。有3 个关键字可以声明变量： var 、 const 和 let 。其中， var 在 ECMAScript的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript 6及更晚的版本中使用。 
var 关键字
var 声明作用域    使用 var 操作符定义的变量会成为包含它的 函数的局部变量    
message 变量是在函数内部使用 var 定义的。 函数叫 test() 
var 声明提升
使用 var 时  个关键字 声明的变量会自动提升到函数作用域顶部
let 声明
let 跟 var 的作用差不多，但有着非常重要的区别。
区别是
let 声明的范围是块作用域，而 var 声明的范围是函数作 用域
age 变量之所以不能在 if 块外部被引用，是因为它 的作用域仅限于该块内部。
let 也不允许同一个块作用域中出现冗余声明。这样会导致报 错
暂时性死区
let 与 var 的另一个重要的区别，就是 let 声明的变量不会 在作用域中被提升
. 全局声明
与 var 关键字不同，使用 let 在全局作用域中声明的变量不会 成为 window 对象的属性（ var 声明的变量则会）。
条件声明
在使用 var 声明变量时，由于声明会被提升，JavaScript引擎会 自动将多余的声明在作用域顶部合并为一个声明。
使用 try / catch 语句或 typeof 操作符也不能解决，因为条 件块中 let 声明的作用域仅限于该块
for 循环中的 let 声明
在 let 出现之前， for 循环定义的迭代变量会渗透到循环体外 部  改成let后 就消失了
const 声明
const 的行为与 let 基本相同，唯一一个重要的区别是用它声 明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导 致运行时错误     const 声明的限制只适用于它指向的变量的引用。如果const引入的是一个对象 那么修改这个对象内部的属性并不违反cosnt限制
声明风格及最佳实践
ECMAScript 6增加 let 和 const 从客观上为这门语言更精确地 声明作用域和语义提供了更好的支持
不使用 var 有了 let 和 const ，大多数开发者会发现自己不再需要 var 了
数据类型
ECMAScript有6种简单数据类型（也称为原始类型）： Undefined 、 Null 、 Boolean 、 Number 、 String 和 Symbol 
typeof 操作符
因为ECMAScript的类型系统是松散的，所以需要一种手段来确定 任意变量的数据类型。 typeof 操作符就是为此而生的。对一个值使 用 typeof 操作符会返回下列字符串之一
"undefined" 表示值未定义； "boolean" 表示值为布尔值； "string" 表示值为字符串； "number" 表示值为数值； "object" 表示值为对象（而不是函数）或 null ； "function" 表示值为函数； "symbol" 表示值为符号
Undefined 类型
Undefined 类型只有一个值，就是特殊值 undefined 。当使 用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予 了 undefined 值
变量 message 显式地以 undefined 来初始化。 
Null 类型
Null 类型同样只有一个值，即特殊值 null
在定义将来要保存对象值的变量时，建议使用 null 来初始化， 不要使用其他值
用等于操作符（ == ）比较 null 和 undefined 始终返回 true 
Boolean 类型
Boolean （布尔值）类型是ECMAScript中使用最频繁的类型之 一，有两个字面值： true 和 false
Number 类型
ECMAScript中最有意思的数据类型或许就是 Number 了。
叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。
整数也可以用八进制（以8为基数）或十六进制（以16为基数）字 面量表示。对于八进制字面量，第一个数字必须是零（0），然后是相 应的八进制数字（数值0~7）。   八进制字面量在严格模式下是无效的，会导致JavaScript引擎抛出 语法错误。1
使用八进制和十六进制格式创建的数值在所有数学操作中都被视 为十进制数值。
浮点值
要定义浮点值，数值中必须包含小数点，而且小数点后面必须至 少有一个数字。
值的范围
由于内存的限制，ECMAScript并不支持表示这个世界上的所有数 值。   有一个特殊的数值叫 NaN 
数值转换
有3个函数可以将非数值转换为数值： Number() 、 parseInt() 和 parseFloat() 。 Number() 是转型函数， 可用于任何数据类型
Number() 函数基于如下规则执行转换。 布尔值， true 转换为1， false 转换为0。 数值，直接返回。 null ，返回0。 undefined ，返回 NaN 。
字符串如果字符串包含数值字符，包括数值字符前面带加、减 号的情况，则转换为一个十进制数值
String 类型
String （字符串）数据类型表示零或多个16位Unicode字符序 列。 字符串可以使用双引号（"）、单引号（'）或反引号（`）标示，
字符串的特点
ECMAScript中的字符串是不可变的（immutable），意思是一旦 创建，它们的值就不能变了
转换为字符串
有两种方式把一个值转换为字符串。首先是使用几乎所有值都有 的 toString() 方法。
toString() 方法可见于数值、布尔值、对象和字符串值。  toString() 返回数值的十进制字符串表示   toString() 输出的字符串 值也会随之改变。数值10可以输出为任意数值格式。 如果值有 toString() 方法，则调用该方法（不传参数） 并返回结果  如果值是 null ，返回 "null" 。 如果值是 undefined ，返回 "undefined" 。
字符串插值
模板字面量最常用的一个特性是支持字符串插值，也就是可以在 一个连续定义中插入一个或多个值 所有插入的值都会使用 toString() 强制转型为字符串，而且 任何JavaScript表达式都可以用于插值
模板字面量标签函数 
模板字面量也支持定义标签函数（tag function），而通过标签函 数可以自定义插值行为。
对于有 n 个插值的模板字面量，传给标签函数的表达式参数的个数始终是 n ，而传给标签函数的第一个参数所包含的字符串个数则始终是 n+1
原始字符串
使用模板字面量也可以直接获取原始的模板字面量内容（如换行 符或Unicode字符），而不是被转换后的字符表示。
可以使 用默认的 String.raw 标
Symbol 类型
Symbol （符号）是ECMAScript 6新增的数据类型。符号是原始 值，且符号实例是唯一、不可变的。
符号的基本用法符号需要使用 Symbol() 函数初始化。因为符号本身是原始类 型，所以 typeof 操作符对符号返回 symbol
调用 Symbol() 函数时，也可以传入一个字符串参数作为对符 号的描述（description），将来可以通过这个字符串来调试代码。
符号没有字面量语法，这也是它们发挥作用的关键。 Symbol() 函数不能用作构造函数，与 new 关键 字一起使用。
使用全局符号注册表
如果运行时的不同部分需要共享和重用符号实例，那么可以用一 个字符串作为键，在全局符号注册表中创建并重用符号。 为此，需要使用 Symbol.for() 方法     Symbol.for() 对每个字符串键都执行幂等操作。   还可以使用 Symbol.keyFor() 来查询全局注册表
Symbol.isConcatSpreadable 
根据ECMAScript规范，这个符号作为一个属性表示“一个布尔 值
Symbol.iterator
Symbol.match
Symbol.replace 
Symbol.search 
Symbol.species
Symbol.split
Symbol.toPrimitive
Symbol.toStringTag
Symbol.unscopables
Object 类型
ECMAScript中的对象其实就是一组数据和功能的集合。对象通 过 new 操作符后跟对象类型的名称来创建。开发者可以通过创建 Object 类型的实例来创建自己的对象，然后再给对象添加属性和方 法
let o = new Object();
操作符
ECMA-262描述了一组可用于操作数据值的操作符，包括数学操 作符（如加、减）、位操作符、关系操作符和相等操作符等。
一元操作符
只操作一个值的操作符叫一元操作符（unary operator）。一元操 作符是ECMAScript中最简单的操作符。
递增/递减操作符
递增和递减操作符直接照搬自C语言，但有两个版本：前缀版和 后缀版
一元加和减
一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript中跟在高中数学中的用途一样
一元减由一个减号（ - ）表示，放在变量前头，主要用于把数值 变成负值，如把1转换为-1。
let num = 25; num = -num; console.log(num); // -25
先转换在赋值
let s1 = "01"; let s2 = "1.1"; let s3 = "z"; let b = false; let f = 1.1; let o = { valueOf() { return -1; } }; s1 = -s1; // 值变成数值-1 s2 = -s2; // 值变成数值-1.1 s3 = -s3; // 值变成NaN b = -b; // 值变成数值0 f = -f; // 变成-1.1 o = -o; // 值变成数值1 
位操作符
接下来要介绍的操作符用于数值的底层操作，也就是操作内存中 表示数据的比特（位）。
按位非 按位非操作符用波浪符（ ~ ）表示，它的作用是返回数值的一补 数。
按位与 按位与操作符用和号（ & ）表示，有两个操作数。本质上，按位 与就是将两个数的每一个位对齐
按位或 按位或操作符用管道符（ | ）表示，同样有两个操作数。
布尔操作符
对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如 果没有能力测试两个值的关系，那么像 if-else 和循环这样的语句 也没什么用了
. 逻辑非 
逻辑非操作符由一个叹号（ ! ）表示，可应用给ECMAScript中 的任何值
如果操作数是对象，则返回 false 。 如果操作数是空字符串，则返回 true 。 如果操作数是非空字符串，则返回 false 。 如果操作数是数值0，则返回 true 。 如果操作数是非0数值（包括 Infinity ），则返回 false 。 如果操作数是 null ，则返回 true 。 如果操作数是 NaN ，则返回 true 。 如果操作数是 undefined ，则返回 true 。
逻辑与
逻辑与操作符由两个和号（ && ）表示，应用到两个值，如下所 示：
let result = true && false;
. 逻辑或
逻辑或操作符由两个管道符（ || ）表示，比如： let result = true || false; 

乘性操作符
ECMAScript定义了3个乘性操作符：乘法、除法和取模。这些操 作符跟它们在Java、C语言及Perl中对应的操作符作用一样，但在处理 非数值时，它们也会包含一些自动的类型转换。
乘法操作符乘法操作符由一个星号（ * ）表示  let result = 34 * 56;
除法操作符 除法操作符由一个斜杠（ / ）表示 let result = 66 / 11;
取模操作符 取模（余数）操作符由一个百分比符号（ % ）表示  let result = 26 % 5; // 等于1 

指数操作符ECMAScript 7新增了指数操作符， Math.pow() 现在有了自己 的操作符 ** 
console.log(Math.pow(3, 2);
// 9 console.log(3 ** 2);
// 9 console.log(Math.pow(16, 0.5);
// 4 console.log(16** 0.5); // 4 
加性操作符
加性操作符，即加法和减法操作符，一般都是编程语言中最简单 的操作符
加法操作符 加法操作符（ + ）用于求两个数的和 let result = 1 + 2;
减法操作符  减法操作符（ - ）也是使用很频繁的一种操作符 let result = 2 - 1;
 关系操作符  关系操作符执行比较两个值的操作，包括小于（ < ）、大于 （ > ）、小于等于（ <= ）和大于等于（ >= ），用法跟数学课上学 的一样
let result1 = 5 > 3; // true let result2 = 5 < 3; // false
相等操作符
 判断两个变量是否相等是编程中最重要的操作之一。
. 等于和不等于   ECMAScript中的等于操作符用两个等于号（ == ）表示，如果操 作数相等，则会返回 true
 全等和不全等 全等和不全等操作符与相等和不相等操作符类似，只不过它们在 比较相等时不转换操作数。全等操作符由3个等于号（ === ）表 示，只有两个操作数在不转换的前提下相等才返回 true
let result1 = ("55" == 55); // true，转换后相 等 let result2 = ("55" === 55); // false，不相 等，因为数据类型不同 
let result1 = ("55" != 55); // false，转换后相 等 let result2 = ("55" !== 55); // true，不相等， 因为数据类型不同

条件操作符   
条件操作符是ECMAScript中用途最为广泛的操作符之一，语法跟 Java中一样
variable = boolean_expression ? true_value : false_value;
 赋值操作符  
简单赋值用等于号（ = ）表示，将右手边的值赋给左手边的变 量，  let num = 10;
每个数学操作符以及其他一些操作符都有对应的复合赋值操作 符：
乘后赋值（ *= ）
除后赋值（ /= ）
取模后赋值（ %= ）
加后赋值（ += ）
减后赋值（ -= ）
左移后赋值（ <<= ）
右移后赋值（ >>= ）
无符号右移后赋值（ >>>= ）

逗号操作符
逗号操作符可以用来在一条语句中执行多个操作
let num1 = 1, num2 = 2, num3 = 3;
在一条语句中同时声明多个变量是逗号操作符最常用的场景
let num = (5, 1, 4, 8, 0); // num的值为0 
语句
ECMA-262描述了一些语句（也称为流控制语句），而 ECMAScript中的大部分语法都体现在语句中。
if 语句
if 语句是使用最频繁的语句之一，语法如下：
if (condition) statement1 else statement2
这里的条件（ condition ）可以是任何表达式，并且求值结果 不一定是布尔值。
if (i > 25) console.log("Greater than 25."); // 只有一行代码 的语句 else { console.log("Less than or equal to 25."); // 一 个语句块 } 
do-while 语句
do-while 语句是一种后测试循环语句，即循环体中的代码执 行后才会对退出条件进行求值。
do-while 的语法如下： do { statement } while (expression);
个例子： let i = 0; do { i += 2; } while (i < 10);
while 语句
while 语句是一种先测试循环语句，即先检测退出条件，再执 行循环体内的代码。
while 循环的语法： while(expression) statement
例子： let i = 0; while (i < 10) { i += 2; } 在

for 语句
for 语句也是先测试语句，只不过增加了进入循环之前的初始 化代码，以及循环执行后要执行的表达式
语法for (initialization; expression; post-loopexpression) statement 
例： let count = 10; for (let i = 0; i < count; i++) { console.log(i); } 

for-in 语句
for-in 语句是一种严格的迭代语句，用于枚举对象中的非符号 键属性
，语法 for (property of expression) statement
例： for (const el of [2,4,6,8]) { document.write(el); } 

标签语句
语法 label: statement 
例子： start: for (let i = 0; i < count; i++) { console.log(i); }

break 和 continue 语句
break 和 continue 语句为执行循环代码提供了更严格的控制 手段。
例子： let num = 0; for (let i = 1; i < 10; i++) { if (i % 5 == 0) { break; } num++; } console.log(num); // 4

with 语句
with 语句的用途是将代码作用域设置为特定的对象
语法 ： with (expression) statement;
例子 let qs = location.search.substring(1); let hostName = location.hostname; let url = location.href;
switch 语句
switch 语句是与 if 语句紧密相关的一种流控制语句，从其他 语言借鉴而来
语 句 switch (expression) { case value1: statement break; case value2: statement break; case value3: statement break; case value4: statement break; default: statement } 
函数
函数对任何语言来说都是核心组件，因为它们可以封装语句，然 后在任何地方、任何时间执行。
是函数的基本语法： function functionName(arg0, arg1,...,argN) { statements }
例子： function sayHi(name, message) { console.log("Hello " + name + " , " + message); } 
小结﻿
JavaScript的核心语言特性在ECMA-262中以伪语言ECMAScript的 形式来定义
ECMA 基本类型包括   Undefined 、 Null 、 Boolean 、 Number 、 String 和 Symbol 。
 ECMAScript提供了C语言和类C语言中常见的很多基本操作符， 包括数学操作符、布尔操作符、关系操作符、相等操作符和赋值 操作符等
Number 一种数值数据类型。
Object 是一种复杂数据类型
其中 if语句 for语句 switch语句 都是借鉴过来的
不需要指定函数的返回值，因为任何函数可以在任何时候返回任 何值。 

不指定返回值的函数实际上会返回特殊值 undefined 。

