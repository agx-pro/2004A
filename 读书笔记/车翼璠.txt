1、什么是JavaScript
核心（ECMAScript）
文档对象模型（DOM）
浏览器对象模型（BOM）
2、ECMAScript
如果不涉及浏览器的话，ECMA-262到底定义了什么？在基本的
层面，它描述这门语言的如下部分：
语法、类型、语句、关键字、保留字、操作符、全局对象
ECMAScript只是对实现这个规范描述的所有方面的一门语言的称
呼。JavaScript实现了ECMAScript，而Adobe ActionScript同样也实现了ECMAScript。
3、ECMAScript符合性是什么意思
ECMA-262阐述了什么是ECMAScript符合性。要成为ECMAScript
实现，必须满足下列条件：
支持ECMA-262中描述的所有“类型、值、对象、属性、函
数，以及程序语法与语义”；
支持Unicode字符标准。
此外，符合性实现还可以满足下列要求。
增加ECMA-262中未提及的“额外的类型、值、对象、属性和
函数”。ECMA-262所说的这些额外内容主要指规范中未给出
的新对象或对象的新属性。
支持ECMA-262中没有定义的“程序和正则表达式语法”（意
思是允许修改和扩展内置的正则表达式特性）。
4、DOM
文档对象模型（DOM，Document Object Model）是一个应用编程
接口（API），用于在HTML中使用扩展的XML。DOM将整个页面抽
象为一组分层节点。HTML或XML页面的每个组成部分都是一种节
点，包含不同的数据。比如下面的HTML页面：
<html> <head> <title>Sample Page</title> </head>
<body> <p> Hello World!</p> </body> </html>
这些代码通过DOM可以表示为一组分层节点
DOM通过创建表示文档的树，让开发者可以随心所欲地控制网页
的内容和结构。使用DOM API，可以轻松地删除、添加、替换、修改
节点。
5、为什么DOM是必需的
在IE4和Netscape Navigator 4支持不同形式的动态
HTML（DHTML）的情况下，开发者首先可以做到不刷新页面而
修改页面外观和内容。这代表了Web技术的一个巨大进步，但也
暴露了很大的问题。由于网景和微软采用不同思路开发
DHTML，开发者写一个HTML页面就可以在任何浏览器中运行的
好日子就此终结。
为了保持Web跨平台的本性，必须要做点什么。人们担心如果无
法控制网景和微软各行其是，那么Web就会发生分裂，导致人们
面向浏览器开发网页。就在这时，万维网联盟（W3C，World
Wide Web Consortium）开始了制定DOM标准的进程。
6、DOM级别
1998年10月，DOM Level 1成为W3C的推荐标准。这个规范由两
个模块组成：DOM Core和DOM HTML。前者提供了一种映射XML文档，从而方便访问和操作文档任意部分的方式；后者扩展了前者，并增加了特定于HTML的对象和方法。
DOM Level 1中的DOM Core也被扩展以包含对XML命名空间的支
持。
DOM Level 2新增了以下模块，以支持新的接口。
DOM视图：描述追踪文档不同视图（如应用CSS样式前后的
文档）的接口。
DOM事件：描述事件及事件处理的接口。
DOM样式：描述处理元素CSS样式的接口。
DOM遍历和范围：描述遍历和操作DOM树的接口。
DOM Level 3进一步扩展了DOM，增加了以统一的方式加载和保
存文档的方法（包含在一个叫DOM Load and Save的新模块中），
还有验证文档的方法（DOM Validation）。
7、其他DOM
除了DOM Core和DOM HTML接口，有些其他语言也发布了自己
的DOM标准。下面列出的语言是基于XML的，每一种都增加了
该语言独有的DOM方法和接口：
可伸缩矢量图（SVG，Scalable Vector Graphics）
数学标记语言（MathML，Mathematical Markup Language）
同步多媒体集成语言（SMIL，Synchronized Multimedia
Integration Language）
此外，还有一些语言开发了自己的DOM实现，比如Mozilla的
XML用户界面语言（XUL，XML User Interface Language）。不
过，只有前面列表中的语言是W3C推荐标准。
8、BOM
总体来说，BOM主要针对浏览器窗口和子窗口（frame），不过
人们通常会把任何特定于浏览器的扩展都归在BOM的范畴内。比如，
下面就是这样一些扩展：
弹出新浏览器窗口的能力；
移动、缩放和关闭浏览器窗口的能力；
navigator 对象，提供关于浏览器的详尽信息；
location 对象，提供浏览器加载页面的详尽信息；
screen 对象，提供关于用户屏幕分辨率的详尽信息；
performance 对象，提供浏览器内存占用、导航行为和时间统
计的详尽信息；
对cookie的支持；
其他自定义对象，如 XMLHttpRequest 和IE的
ActiveXObject
9、小结
JavaScript是一门用来与网页交互的脚本语言，包含以下三个组成
部分。
ECMAScript：由ECMA-262定义并提供核心功能。
文档对象模型（DOM）：提供与网页内容交互的方法和接口。
浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。
HTML中的JavaScript
将JavaScript引入网页，首先要解决它与网页的主导语言HTML的
关系问题。在JavaScript早期，网景公司的工作人员希望在将JavaScript引入HTML页面的同时，不会导致页面在其他浏览器中渲染出问题。通过反复试错和讨论，他们最终做出了一些决定，并达成了向网页中引入通用脚本能力的共识。当初他们的很多工作得到了保留，并且最终形成了HTML规范
1、<script> 元素
<script> 元素有下列8个属性。
async ：可选。表示应该立即开始下载脚本，但不能阻止其他
页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文
件有效。
charset ：可选。使用 src 属性指定的代码字符集。这个属
性很少使用，因为大多数浏览器不在乎它的值
crossorigin ：可选。配置相关请求的CORS（跨源资源共
享）设置。默认不使用CORS。crossorigin="anonymous" 配置文件请求不必设置凭据标志。 crossorigin="use-credentials" 设置凭据标志，意味着出站请求会包含凭据。
defer ：可选。表示在文档解析和显示完成后再执行脚本是没
有问题的。只对外部脚本文件有效。在IE7及更早的版本中，对行
内脚本也可以指定这个属性。
integrity ：可选。允许比对接收到的资源和指定的加密签名
以验证子资源完整性（SRI，Subresource Intergrity）。如果接收到
的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚
本不会执行。这个属性可以用于确保内容分发网络（CDN，
Content Delivery Network）不会提供恶意内容
language ：废弃。最初用于表示代码块中的脚本语言
（如 "JavaScript" 、 "JavaScript1.2" 或 "VBScript" ）。大多数浏览器都会忽略这个属性，不应该再使用它。
src ：可选。表示包含要执行的代码的外部文件。
type ：可选。代替 language ，表示代码块中脚本语言的内
容类型（也称MIME类型）。
1 、标签占位符
过去，所有 <script> 元素都被放在页面的 <head> 标签内，
如下面的例子所示：
<!DOCTYPE html>
<html>
<head>
<title>Example HTML Page</title>
<script src="example1.js"></script>
<script src="example2.js"></script>
</head>
<body>
<!-- 这里是页面内容 -->
</body>
</html>
2、推迟执行脚本
HTML 4.01为 <script> 元素定义了一个叫 defer 的属性。这
个属性表示脚本在执行的时候不会改变页面的结构。因此，这个脚本完全可以在整个页面解析完之后再运行。在 <script> 元素上设置
defer 属性，会告诉浏览器应该立即开始下载，但执行应该推
3、异步执行脚本
HTML5为 <script> 元素定义了 async 属性。从改变脚本处
理方式上看， async 属性与 defer 类似。当然，它们两者也都只
适用于外部脚本，都会告诉浏览器立即开始下载。不过，与 defer
不同的是，标记为 async 的脚本并不保证能按照它们出现的次序执
行，比如：
<!DOCTYPE html>
<html>
<head>
<title>Example HTML Page</title>
<script async src="example1.js"></script>
<script async src="example2.js"></script>
</head>
<body>
<!-- 这里是页面内容 -->
</body>
</html>
3、动态加载脚本
除了 <script> 标签，还有其他方式可以加载脚本。因为
JavaScript可以使用DOM API，所以通过向DOM中动态添加 script
元素同样可以加载指定的脚本。只要创建一个 script 元素并将其添
加到DOM即可。
4、XHTML中的变化
可扩展超文本标记语言（XHTML，Extensible HyperText Markup
Language）是将HTML作为XML的应用重新包装的结果。与HTML不
同，在XHTML中使用JavaScript必须指定 type 属性且值为
text/javascript ，HTML中则可以没有这个属性。XHTML虽然
已经退出历史舞台，但实践中偶尔可能也会遇到遗留代码，为此本节
稍作介绍。在XHTML中编写代码的规则比HTML中严格，这会影响使用<script> 元素嵌入JavaScript代码。下面的代码块虽然在HTML中
有效，但在XHML中是无效的


5、在HTML中，解析 <script> 元素会应用特殊规则。XHTML中
则没有这些规则。这意味着 a < b 语句中的小于号（ < ）会被解释
成一个标签的开始，并且由于作为标签开始的小于号后面不能有空
格，这会导致语法错误。
避免XHTML中这种语法错误的方法有两种。第一种是把所有小
于号（ < ）都替换成对应的HTML实体形式（ < ）。结果代码就
是这样的：

6、废弃的语法
自1995年Netscape 2发布以来，所有浏览器都将JavaScript作为默
认的编程语言。 type 属性使用一个MIME类型字符串来标识
<script> 的内容，但MIME类型并没有跨浏览器标准化。即使浏览
器默认使用JavaScript，在某些情况下某个无效或无法识别的MIME类
型也可能导致浏览器跳过（不执行）相关代码。因此，除非你使用
XHML或 <script> 标签要求或包含非JavaScript代码，最佳做法是
不指定 type 属性。在最初采用 script 元素时，它标志着开始走向与传统HTML解
析不同的流程。对这个元素需要应用特殊的解析规则，而这在不支持
JavaScript的浏览器（特别是Mosaic）中会导致问题。不支持的浏览器
会把 <script> 元素的内容输出到页面上，从而破坏页面的外观。

1、行内代码与外部文件
可维护性。JavaScript代码如果分散到很多HTML页面，会导致维
护困难。而用一个目录保存所有JavaScript文件，则更容易维护，这样开发者就可以独立于使用它们的HTML页面来编辑代码。
缓存。浏览器会根据特定的设置缓存所有外部链接的JavaScript文
件，这意味着如果两个页面都用到同一个文件，则该文件只需下
载一次。这最终意味着页面加载更快。
适应未来。通过把JavaScript放到外部文件中，就不必考虑用
XHTML或前面提到的注释黑科技。包含外部JavaScript文件的语
法在HTML和XHTML中是一样的。

在配置浏览器请求外部文件时，要重点考虑的一点是它们会占用
多少带宽。在SPDY/HTTP2中，预请求的消耗已显著降低，以轻量、
独立JavaScript组件形式向客户端送达脚本更具优势。
2、文档模式
IE5.5发明了文档模式的概念，即可以使用 doctype 切换文档模
式。最初的文档模式有两种：混杂模式（quirks mode）和标准模式
（standards mode）。前者让IE像IE5一样（支持一些非标准的特
性），后者让IE具有兼容标准的行为。虽然这两种模式的主要区别只
体现在通过CSS渲染的内容方面，但对JavaScript也有一些关联影响，
或称为副作用。
一、<noscript> 元素
针对早期浏览器不支持JavaScript的问题，需要一个页面优雅降级
的处理方案。最终， <noscript> 元素出现，被用于给不支持
JavaScript的浏览器提供替代内容。虽然如今的浏览器已经100%支持
JavaScript，但对于禁用JavaScript的浏览器来说，这个元素仍然有它的用处

<noscript> 元素可以包含任何可以出现在 <body> 中的
HTML元素， <script> 除外。在下列两种情况下，浏览器将显示包
含在 <noscript> 中的内容：
浏览器不支持脚本；
浏览器对脚本的支持被关闭。任何一个条件被满足，包含在 <noscript> 中的内容就会被渲
染。否则，浏览器不会渲染 <noscript> 中的内容。

一、语言基础
1、语法
ECMAScript的语法很大程度上借鉴了C语言和其他类C语言，如
Java和Perl。熟悉这些语言的开发者，应该很容易理解ECMAScript宽
松的语法。
2、区分大小写
首先要知道的是，ECMAScript中一切都区分大小写。无论是变
量、函数名还是操作符，都区分大小写。换句话说，变量 test 和变
量 Test 是两个不同的变量。类似地， typeof 不能作为函数名，
因为它是一个关键字（后面会介绍）。但 Typeof 是一个完全有效的
函数名。
3、标识符
所谓标识符，就是变量、函数、属性或函数参数的名称。标识符
可以由一或多个下列字符组成：
第一个字符必须是一个字母、下划线（ _ ）或美元符号
（ $ ）；
剩下的其他字符可以是字母、下划线、美元符号或数字
4、注释
ECMAScript采用C语言风格的注释，包括单行注释和块注释。单
行注释以两个斜杠字符开头，如：
// 单行注释
块注释以一个斜杠和一个星号（ /* ）开头，以它们的反向组合
（ */ ）结尾，如：
/* 这是多行
注释 */
5、严格模式
ECMAScript 5增加了严格模式（strict mode）的概念。严格模式是
一种不同的JavaScript解析和执行模型，ECMAScript 3的一些不规范写
法在这种模式下会被处理，对于不安全的活动将抛出错误。要对整个
脚本启用严格模式，在脚本开头加上这一行：
"use strict";
严格模式会影响JavaScript执行的很多方面，因此本书在用到它时
会明确指出来。所有现代浏览器都支持严格模式。
6、语句
ECMAScript中的语句以分号结尾。省略分号意味着由解析器确定
语句在哪里结尾
if之类的控制语句只在执行多条语句时要求必须有代码块。不
过，最佳实践是始终在控制语句中使用代码块，即使要执行的只有一
条语句
7、关键字与保留字
ECMA-262描述了一组保留的关键字，这些关键字有特殊用途，
比如表示控制语句的开始和结束，或者执行特定的操作。按照规定，
保留的关键字不能用作标识符或属性名。ECMA-262第6版规定的所有
关键字如下：
break do in typeof
case else instanceof var
catch export new void
class extends return while
const finally super with
continue for switch yield
debugger function this
default if throw
delete import try
以下是ECMA-262第6版为将来保留的所有词汇。
始终保留:
enum
严格模式下保留:
implements package public
interface protected static
let private
模块代码中保留:
await
8、变量
ECMAScript变量是松散类型的，意思是变量可以用于保存任何类
型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有3个关键字可以声明变量： var 、 const 和 let 。其中， var 在
ECMAScript的所有版本中都可以使用，而 const 和 let 只能在
ECMAScript 6及更晚的版本中使用。
9、var 关键字
要定义变量，可以使用 var 操作符（注意 var 是一个关键
字），后跟变量名（即标识符，如前所述）
1. var 声明作用域
关键的问题在于，使用 var 操作符定义的变量会成为包含它的
函数的局部变量。比如，使用 var 在一个函数内部定义一个变
量，就意味着该变量将在函数退出时被销毁：
去掉之前的 var 操作符之后， message 就变成了全局变量。
只要调用一次函数 test() ，就会定义这个变量，并且可以在函
数外部访问到。
注意 虽然可以通过省略 var 操作符定义全局变量，但不推
荐这么做。在局部作用域中定义的全局变量很难维护，也会造
成困惑。这是因为不能一下子断定省略 var 是不是有意而为之。在严格模式下，如果像这样给未声明的变量赋值，则会导
致抛出 ReferenceError 。
2. var 声明提升
使用 var 时，下面的代码不会报错。这是因为使用这个关键字
声明的变量会自动提升到函数作用域顶部：
所谓的“提升”（hoist），也就是把所有变量声明都拉到函
数作用域的顶部。此外，反复多次使用 var 声明同一个变量也
没有问题：
3、let 声明
let 跟 var 的作用差不多，但有着非常重要的区别。最明显的
区别是， let 声明的范围是块作用域，而 var 声明的范围是函数作
用域。
4、暂时性死区
let 与 var 的另一个重要的区别，就是 let 声明的变量不会
在作用域中被提升。
// name会被提升
console.log(name); // undefined
var name = 'Matt';
// age不会被提升console.log(age); // ReferenceError：age没有定
义
let age = 26;
5、全局声明
与 var 关键字不同，使用 let 在全局作用域中声明的变量不会
成为 window 对象的属性（ var 声明的变量则会）。
6、条件声明
自动将多余的声明在作用域顶部合并为一个声明。因为 let 的
作用域是块，所以不可能检查前面是否已经使用 let 声明过同
名变量，同时也就不可能在没有声明的情况下声明它。
7、for 循环中的 let 声明
在 let 出现之前， for 循环定义的迭代变量会渗透到循环体外
部
for (var i = 0; i < 5; ++i) {
// 循环逻辑
}
console.log(i); //
改成使用 let 之后，这个问题就消失了，因为迭代变量的作用
域仅限于 for 循环块内部：
在使用 var 的时候，最常见的问题就是对迭代变量的奇特声明
和修改
之所以会这样，是因为在退出循环时，迭代变量保存的是导致循
环退出的值：5。在之后执行超时逻辑时，所有的 i 都是同一个
变量，因而输出的都是同一个最终值。
而在使用 let 声明迭代变量时，JavaScript引擎在后台会为每个
迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都
是不同的变量实例，所以 console.log 输出的是我们期望的
值，也就是循环执行过程中每个迭代变量的值。
 8、const 声明
const 的行为与 let 基本相同，唯一一个重要的区别是用它声
明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导
致运行时错误。
const 声明的限制只适用于它指向的变量的引用。换句话说，
如果 const 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 const 的限制。
9、数据类型
ECMAScript有6种简单数据类型（也称为原始类型）：
Undefined 、 Null 、 Boolean 、 Number 、 String 和
Symbol 。 Symbol （符号）是ECMAScript 6新增的。还有一种复
杂数据类型叫 Object （对象）。 Object 是一种无序名值对的集
合。因为在ECMAScript中不能定义自己的数据类型，所有值都可以用上述7种数据类型之一来表示。只有7种数据类型似乎不足以表示全部
数据。但ECMAScript的数据类型很灵活，一种数据类型可以当作多种
数据类型来使用。
10、typeof 操作符
"undefined" 表示值未定义；
"boolean" 表示值为布尔值；
"string" 表示值为字符串；
"number" 表示值为数值；
"object" 表示值为对象（而不是函数）或 null ；
"function" 表示值为函数；
"symbol" 表示值为符号。
11、Undefined 类型
Undefined 类型只有一个值，就是特殊值 undefined 。当使
用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予
了 undefined 值：
12、Null 类型
Null 类型同样只有一个值，即特殊值 null 。逻辑上讲，
null 值表示一个空对象指针，这也是给 typeof 传一个 null 会
返回 "object" 的原因
用等于操作符（ == ）比较 null 和 undefined 始终返回
true 。但要注意，这个操作符会为了比较而转换它的操作数
即使 null 和 undefined 有关系，它们的用途也是完全不一样
的。如前所述，永远不必显式地将变量值设置为 undefined 。但
null 不是这样的。任何时候，只要变量要保存对象，而当时又没有
那个对象可保存，就要用 null 来填充该变量。这样就可以保持
null 是空对象指针的语义，并进一步将其与 undefined 区分开
来。
null 是一个假值。因此，如果需要，可以用更简洁的方式检测
它。不过要记住，也有很多其他可能的值同样是假值。所以一定要明
确自己想检测的就是 null 这个字面值，而不仅仅是假值
13、Boolean 类型
Boolean （布尔值）类型是ECMAScript中使用最频繁的类型之
一，有两个字面值： true 和 false 。这两个布尔值不同于数值，
因此 true 不等于1， false 不等于0。
注意，布尔值字面量 true 和 false 是区分大小写的，因此
True 和 False （及其他大小混写形式）是有效的标识符，但不是
布尔值。
虽然布尔值只有两个，但所有其他ECMAScript类型的值都有相应
布尔值的等价形式。要将一个其他类型的值转换为布尔值，可以调用
特定的 Boolean() 转型函数
14、Number 类型
ECMAScript中最有意思的数据类型或许就是 Number 了。
Number 类型使用IEEE 754格式表示整数和浮点值（在某些语言中也
叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。
最基本的数值字面量格式是十进制整数，直接写出来即可
八进制字面量在严格模式下是无效的，会导致JavaScript引擎抛出
语法错误。1
1. 浮点值
要定义浮点值，数值中必须包含小数点，而且小数点后面必须至
少有一个数字。虽然小数点前面不是必须有整数，但推荐加上
2. 值的范围
由于内存的限制，ECMAScript并不支持表示这个世界上的所有数
值。ECMAScript可以表示的最小数值保存在
Number.MIN_VALUE 中，这个值在多数浏览器中是5e-324；可
以表示的最大数值保存在 Number.MAX_VALUE 中，这个值在多
数浏览器中是1.797 693 134 862 315 7e+308。如果某个计算得到的
数值结果超出了JavaScript可以表示的范围，那么这个数值会被自
动转换为一个特殊的 Infinity （无穷）值。任何无法表示的
负数以 -Infinity （负无穷大）表示，任何无法表示的正数
以 Infinity （正无穷大）表示。
3. NaN
有一个特殊的数值叫 NaN ，意思是“不是数值”（Not a
Number），用于表示本来要返回数值的操作失败了（而不是抛出
错误）。比如，用0除任意数值在其他语言中通常都会导致错误，
从而中止代码执行。但在ECMAScript中，0、+0或-0相除会返回
NaN
4. 数值转换
有3个函数可以将非数值转换为数值： Number() 、
parseInt() 和 parseFloat() 。 Number() 是转型函数，
可用于任何数据类型。后两个函数主要用于将字符串转换为数
值。对于同样的参数，这3个函数执行的操作也不同。
Number() 函数基于如下规则执行转换。
布尔值， true 转换为1， false 转换为0。数值，直接返回。
null ，返回0。
undefined ，返回 NaN 。
15、String 类型
String （字符串）数据类型表示零或多个16位Unicode字符序
列。字符串可以使用双引号（"）、单引号（'）或反引号（`）标示，
1. 字符字面量
字符串数据类型包含一些字符字面量，用于表示非打印字符或有
其他用途的字符，如下表所示：
字面量
含义
\n
换行
\t
制表
\b
退格
\r
回车
\f
换页
\\\\
反斜杠（ \ ）
\'
单引号（ ' ），在字符串以单引号标示时使用，例如 'He said, \'hey.\''
\"
双引号（ " ），在字符串以双引号标示时使
用，例如 "He said, \"hey.\""
\\\`
反引号（ \` ），在字符串以反引号标示时
使用，例如 \`He said,
\\\`hey.\\\`\`
\xnn
以十六进制编码 nn 表示的字符（其中 n 是
十六进制数字0~F），例如 \x41 等于 "A"
\unnnn
以十六进制编码 nnnn 表示的Unicode字符
（其中 n 是十六进制数字0~F），例如
\u03a3 等于希腊字符 "Σ"
2. 字符串的特点
ECMAScript中的字符串是不可变的（immutable），意思是一旦
创建，它们的值就不能变了。要修改某个变量中的字符串值，必
须先销毁原始的字符串，然后将包含新值的另一个字符串保存到
该变量
3. 转换为字符串
有两种方式把一个值转换为字符串。首先是使用几乎所有值都有
的 toString() 方法。这个方法唯一的用途就是返回当前值的
字符串等价物。
4、字符串插值
模板字面量最常用的一个特性是支持字符串插值，也就是可以在
一个连续定义中插入一个或多个值。技术上讲，模板字面量不是
字符串，而是一种特殊的JavaScript句法表达式，只不过求值后得
到的是字符串。模板字面量在定义时立即求值并转换为字符串实
例，任何插入的变量也会从它们最接近的作用域中取值。
字符串插值通过在 ${} 中使用一个JavaScript表达式实现
5、原始字符串
使用模板字面量也可以直接获取原始的模板字面量内容（如换行
符或Unicode字符），而不是被转换后的字符表示。为此，可以使
用默认的 String.raw 标签函数
16、Symbol 类型
Symbol （符号）是ECMAScript 6新增的数据类型。符号是原始
值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用
唯一标识符，不会发生属性冲突的危险。
1. 符号的基本用法
符号需要使用 Symbol() 函数初始化。因为符号本身是原始类
型，所以 typeof 操作符对符号返回 symbol 。
2. 使用全局符号注册表
如果运行时的不同部分需要共享和重用符号实例，那么可以用一
个字符串作为键，在全局符号注册表中创建并重用符号。
为此，需要使用 Symbol.for() 方法
3. 使用符号作为属性
凡是可以使用字符串或数值作为属性的地方，都可以使用符号。
这就包括了对象字面量属性和
Object.defineProperty() / Object.definedProperties() 定义的属性。对象字面量只能在计算属性语法中使用符号
作为属性
4. 常用内置符号
ECMAScript 6也引入了一批常用内置符号（well-known
symbol），用于暴露语言内部行为，开发者可以直接访问、重写
或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属
性的形式存在。
5. Symbol.asyncIterator
根据ECMAScript规范，这个符号作为一个属性表示“一个方法，
该方法返回对象默认的 AsyncIterator 。由 for-await-
of 语句使用”。换句话说，这个符号表示实现异步迭代器API的
函数。
6. Symbol.hasInstance
根据ECMAScript规范，这个符号作为一个属性表示“一个方法，
该方法决定一个构造器对象是否认可一个对象是它的实例。由
instanceof 操作符使用”。 instanceof 操作符可以用来确
定一个对象实例的原型链上是否有原型。 instanceof 的典型
使用场景如下：
function Foo() {}
let f = new Foo();
console.log(f instanceof Foo); // trueclass Bar {}
let b = new Bar();
console.log(b instanceof Bar); // true
7. Symbol.isConcatSpreadable
根据ECMAScript规范，这个符号作为一个属性表示“一个布尔
值，如果是 true ，则意味着对象应该用
Array.prototype.concat() 打平其数组元素”。ES6中的
Array.prototype.concat() 方法会根据接收到的对象类型
选择如何将一个类数组对象拼接成数组实例。覆盖
Symbol.isConcatSpreadable 的值可以修改这个行为。
数组对象默认情况下会被打平到已有的数组， false 或假值会
导致整个对象被追加到数组末尾。类数组对象默认情况下会被追
加到数组末尾， true 或真值会导致这个类数组对象被打平到数
组实例。其他不是类数组对象的对象在
Symbol.isConcatSpreadable 被设置为 true 的情况下将
被忽略
8. Symbol.iterator
根据ECMAScript规范，这个符号作为一个属性表示“一个方法，
该方法返回对象默认的迭代器。由 for-of 语句使用”。换句话
说，这个符号表示实现迭代器API的函数。
for-of 循环这样的语言结构会利用这个函数执行迭代操作。循
环时，它们会调用以 Symbol.iterator 为键的函数，并默认
这个函数会返回一个实现迭代器API的对象。很多时候，返回的
对象是实现该API的 Generator ：
class Foo {
*[Symbol.iterator]() {}
}
let f = new Foo();
console.log(f[Symbol.iterator]());
// Generator {<suspended>}
技术上，这个由 Symbol.iterator 函数生成的对象应该通过
其 next() 方法陆续返回值。可以通过显式地调用 next() 方
法返回，也可以隐式地通过生成器函数返回：
9. Symbol.match根据ECMAScript规范，这个符号作为一个属性表示“一个正则表
达式方法，该方法用正则表达式去匹配字符串。由
String.prototype.match() 方法使用”。
String.prototype.match() 方法会使用以
Symbol.match 为键的函数来对正则表达式求值。正则表达式
的原型上默认有这个函数的定义，因此所有正则表达式实例默认
是这个 String 方法的有效参数
10. Symbol.replace
根据ECMAScript规范，这个符号作为一个属性表示“一个正则表
达式方法，该方法替换一个字符串中匹配的子串。由
String.prototype.replace() 方法使用”。
String.prototype.replace() 方法会使用以
Symbol.replace 为键的函数来对正则表达式求值。正则表达
式的原型上默认有这个函数的定义，因此所有正则表达式实例默
认是这个 String 方法的有效参数：
11. Symbol.search
根据ECMAScript规范，这个符号作为一个属性表示“一个正则表
达式方法，该方法返回字符串中匹配正则表达式的索引。由
String.prototype.search() 方法使用”。
String.prototype.search() 方法会使用以
Symbol.search 为键的函数来对正则表达式求值。正则表达
式的原型上默认有这个函数的定义，因此所有正则表达式实例默
认是这个 String 方法的有效参数：
12. Symbol.species
根据ECMAScript规范，这个符号作为一个属性表示“一个函数
值，该函数作为创建派生对象的构造函数”。这个属性在内置类型
中最常用，用于对内置类型实例方法的返回值暴露实例化派生对
象的方法。用 Symbol.species 定义静态的获取器（getter）方
法，可以覆盖新创建实例的原型定义：
13. Symbol.split
根据ECMAScript规范，这个符号作为一个属性表示“一个正则表
达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由
String.prototype.split() 方法使用”。
String.prototype.split() 方法会使用以
Symbol.split 为键的函数来对正则表达式求值。正则表达式
的原型上默认有这个函数的定义，因此所有正则表达式实例默认
是这个 String 方法的有效参数：
14. Symbol.toPrimitive根据ECMAScript规范，这个符号作为一个属性表示“一个方法，
该方法将对象转换为相应的原始值。由 ToPrimitive 抽象操作
使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字
符串、数值和未指定的原始类型。对于一个自定义对象实例，通
过在这个实例的 Symbol.toPrimitive 属性上定义一个函数
可以改变默认行为。
根据提供给这个函数的参数（ string 、 number 或
default ），可以控制返回的原始值
15. Symbol.toStringTag
根据ECMAScript规范，这个符号作为一个属性表示“一个字符
串，该字符串用于创建对象的默认字符串描述。由内置方法
Object.prototype.toString() 使用”。
通过 toString() 方法获取对象标识时，会检索由
Symbol.toStringTag 指定的实例标识符，默认
为 "Object" 。内置类型已经指定了这个值，但自定义类实例
还需要明确定义
16. Symbol.unscopables
根据ECMAScript规范，这个符号作为一个属性表示“一个对象，
该对象所有的以及继承的属性，都会从关联对象的 with 环境绑
定中排除”。设置这个符号并让其映射对应属性的键值为true ，就可以阻止该属性出现在 with 环境绑定中，如下例所
示：
17、Object 类型
ECMAScript中的对象其实就是一组数据和功能的集合。对象通
过 new 操作符后跟对象类型的名称来创建。开发者可以通过创建
Object 类型的实例来创建自己的对象，然后再给对象添加属性和方
法：
let o = new Object();这个语法类似Java，但ECMAScript只要求在给构造函数提供参数
时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略
括号（不推荐）：
let o = new Object; // 合法，但不推荐

每个 Object 实例都有如下属性和方法。
constructor ：用于创建当前对象的函数。在前面的例子中，
这个属性的值就是 Object() 函数。
hasOwnProperty(propertyName) ：用于判断当前对象实
例（不是原型）上是否存在给定的属性。要检查的属性名必须是
字符串（如 o.hasOwnProperty("name") ）。
isPrototypeof(object) ：用于判断当前对象是否为另一个
对象的原型。（第5章将详细介绍原型。）
propertyIsEnumerable(propertyName) ：用于判断给定
的属性是否可以使用（本章稍后讨论的） for-in 语句枚举。
与 hasOwnProperty() 一样，属性名必须是字符串。
toLocaleString() ：返回对象的字符串表示，该字符串反映
对象所在的本地化执行环境。
toString() ：返回对象的字符串表示。valueOf() ：返回对象对应的字符串、数值或布尔值表示。通
常与 toString() 的返回值相同。
18、操作符
ECMA-262描述了一组可用于操作数据值的操作符，包括数学操
作符（如加、减）、位操作符、关系操作符和相等操作符等。
ECMAScript中的操作符是独特的，因为它们可用于各种值，包括字符
串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会
调用 valueOf() 和 / 或 toString() 方法来取得可以计算的值。
19、一元操作符
只操作一个值的操作符叫一元操作符（unary operator）。一元操
作符是ECMAScript中最简单的操作符
1. 递增/递减操作符
递增和递减操作符直接照搬自C语言，但有两个版本：前缀版和
后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版
就是位于要操作的变量后头。前缀递增操作符会给数值加1，把两
个加号（ ++ ）放到变量前头即可
2. 一元加和减
一元加和减操作符对大多数开发者来说并不陌生，它们在
ECMAScript中跟在高中数学中的用途一样。一元加由一个加号
（ + ）表示，放在变量前头，对数值没有任何影响：
20、 位操作符
ECMAScript中的所有数值都以IEEE 754 64位
格式存储，但位操作并不直接应用到64位表示，而是先把值转换为32
位整数，再进行位操作，之后再把结果转换为64位。对开发者而言，就好像只有32位整数一样，因为64位整数存储格式是不可见的。既然
知道了这些，就只需要考虑32位整数即可。
有符号整数使用32位的前31位表示整数值。第32位表示数值的符
号，如0表示正，1表示负。这一位称为符号位（sign bit），它的值决
定了数值其余部分的格式。正值以真正的二进制格式存储，即31位中
的每一位都代表2的幂。第一位（称为第0位）表示20，第二位表示
21，依此类推。如果一个位是空的，则以0填充，相当于忽略不计。比
如，数值18的二进制格式为00000000000000000000000000010010，或
更精简的10010。后者是用到的5个有效位，决定了实际的值
1. 按位非
按位非操作符用波浪符（ ~ ）表示，它的作用是返回数值的一补
数。按位非是ECMAScript中为数不多的几个二进制数学操作符之
一。
2. 按位与
按位与操作符用和号（ & ）表示，有两个操作数。本质上，按位
与就是将两个数的每一个位对齐，然后基于真值表中的规则，对
每一位执行相应的与操作。
4. 按位异或
按位异或用脱字符（ ^ ）表示，同样有两个操作数。下面是按位
异或的真值表：
第一个数的位
第二个数的位
结果
1
1
0
1
0
1
0
1
1
0
0
0
按位异或与按位或的区别是，它只在一位上是1的时候返回1（两
位都是1或0，则返回0）
5. 左移
左移操作符用两个小于号（ << ）表示，会按照指定的位数将数
值的所有位向左移动。比如，如果数值2（二进制10）向左移5
位，就会得到64（二进制1000000）
6. 有符号右移
有符号右移由两个大于号（ >> ）表示，会将数值的所有32位都
向右移，同时保留符号（正或负）。有符号右移实际上是左移的
逆运算。比如，如果将64右移5位，那就是2：
7. 无符号右移
无符号右移用3个大于号表示（ >>> ），会将数值的所有32位都
向右移。对于正数，无符号右移与有符号右移结果相同。仍然以
前面有符号右移的例子为例，64向右移动5位，会变成2：
21、布尔操作符
对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如
果没有能力测试两个值的关系，那么像 if-else 和循环这样的语句
也没什么用了。布尔操作符一共有3个：逻辑非、逻辑与和逻辑或。
1. 逻辑非
逻辑非操作符由一个叹号（ ! ）表示，可应用给ECMAScript中
的任何值。这个操作符始终返回布尔值，无论应用到的是什么数
据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其
取反。换句话说，逻辑非操作符会遵循如下规则。
如果操作数是对象，则返回 false 。
如果操作数是空字符串，则返回 true 。
如果操作数是非空字符串，则返回 false 。
如果操作数是数值0，则返回 true 。
如果操作数是非0数值（包括 Infinity ），则返回
false 。
如果操作数是 null ，则返回 true 。
如果操作数是 NaN ，则返回 true 。如果操作数是 undefined ，则返回 true 。
2. 逻辑与
逻辑与操作符由两个和号（ && ）表示，应用到两个值，如下所
示：
let result = true && fal
逻辑与操作符遵循如下真值表：第一个操作数
第二个操作数
结果
true
true
true
true
false
false
false
true
false
false
false
false
逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有
操作数不是布尔值，则逻辑与并不一定会返回布尔值，而是遵循
如下规则。
如果第一个操作数是对象，则返回第二个操作数。
如果第二个操作数是对象，则只有第一个操作数求值为
true 才会返回该对象。
如果两个操作数都是对象，则返回第二个操作数。
如果有一个操作数是 null ，则返回 null 。
如果有一个操作数是 NaN ，则返回 NaN 。
如果有一个操作数是 undefined ，则返回 undefined 。
3. 逻辑或
逻辑或操作符由两个管道符（ || ）表示，比如：
let result = true || false;
逻辑或操作符遵循如下真值表：
第一个操作数
第二个操作数
结果
true
true
true
true
false
true
false
true
true
false
false
false
与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作
符也不一定返回布尔值。它遵循如下规则。如果第一个操作数是对象，则返回第一个操作数。
如果第一个操作数求值为 false ，则返回第二个操作数。
如果两个操作数都是对象，则返回第一个操作数。
如果两个操作数都是 null ，则返回 null 。
如果两个操作数都是 NaN ，则返回 NaN 。
如果两个操作数都是 undefined ，则返回 undefined 。
同样与逻辑与类似，逻辑或操作符也具有短路的特性。只不过对
逻辑或而言，第一个操作数求值为 true ，第二个操作数就不会
再被求值了
22、乘性操作符
ECMAScript定义了3个乘性操作符：乘法、除法和取模。这些操
作符跟它们在Java、C语言及Perl中对应的操作符作用一样，但在处理
非数值时，它们也会包含一些自动的类型转换。如果乘性操作符有不
是数值的操作数，则该操作数会在后台被使用 Number() 转型函数
转换为数值。这意味着空字符串会被当成0，而布尔值 true 会被当
成1。
1. 乘法操作符
乘法操作符由一个星号（ * ）表示，可以用于计算两个数值的乘
积。其语法类似于C语言，比如：
let result = 34 * 56;
不过，乘法操作符在处理特殊值时也有一些特殊的行为。
2. 除法操作符
除法操作符由一个斜杠（ / ）表示，用于计算第一个操作数除以
第二个操作数的商，比如：
let result = 66 / 11;
跟乘法操作符一样，除法操作符针对特殊值也有一些特殊的行
为。
如果操作数都是数值，则执行常规的除法运算，即两个正值
相除是正值，两个负值相除也是正值，符号不同的值相除得
到负值。如果ECMAScript不能表示商，则返回 Infinity
或 -Infinity 。
如果有任一操作数是 NaN ，则返回 NaN 。
如果是 Infinity 除以 Infinity ，则返回 NaN 。
如果是0除以0，则返回 NaN 。如果是非0的有限值除以0，则根据第一个操作数的符号返回
Infinity 或 -Infinity 。
如果是 Infinity 除以任何数值，则根据第二个操作数的
符号返回 Infinity 或 -Infinity 。
如果有不是数值的操作数，则先在后台用 Number() 函数
将其转换为数值，然后再应用上述规则
3. 取模操作符
取模（余数）操作符由一个百分比符号（ % ）表示，比如：
let result = 26 % 5; // 等于1
与其他乘性操作符一样，取模操作符对特殊值也有一些特殊的行
为。
如果操作数是数值，则执行常规除法运算，返回余数。
如果被除数是无限值，除数是有限值，则返回 NaN 。
如果被除数是有限值，除数是0，则返回 NaN 。
如果是 Infinity 除以 Infinity ，则返回 NaN 。
如果被除数是有限值，除数是无限值，则返回被除数。
如果被除数是0，除数不是0，则返回0。
如果有不是数值的操作数，则先在后台用 Number() 函数
将其转换为数值，然后再应用上述规则。
23、指数操作符
ECMAScript 7新增了指数操作符， Math.pow() 现在有了自己
的操作符 ** ，结果是一样的：
不仅如此，指数操作符也有自己的指数赋值操作符 **= ，该操
作符执行指数运算和结果的赋值操作
24、加性操作符
加性操作符，即加法和减法操作符，一般都是编程语言中最简单
的操作符。不过，在ECMAScript中，这两个操作符拥有一些特殊的行
为。与乘性操作符类似，加性操作符在后台会发生不同数据类型的转
换。只不过对这两个操作符来说，转换规则不是那么直观
1. 加法操作符
加法操作符（ + ）用于求两个数的和，比如：
let result = 1 + 2;
如果两个操作数都是数值，加法操作符执行加法运算并根据如下
规则返回结果：如果有任一操作数是 NaN ，则返回 NaN ；
如果是 Infinity 加 Infinity ，则返回 Infinity ；
如果是 -Infinity 加 -Infinity ，则返回 -
Infinity ；
如果是 Infinity 加 -Infinity ，则返回 NaN ；
如果是 +0 加 +0 ，则返回 +0 ；
如果是 -0 加 +0 ，则返回 +0 ；
如果是 -0 加 -0 ，则返回 -0 。
不过，如果有一个操作数是字符串，则要应用如下规则：
如果两个操作数都是字符串，则将第二个字符串拼接到第一
个字符串后面；
如果只有一个操作数是字符串，则将另一个操作数转换为字
符串，再将两个字符串拼接在一起。
如果有任一操作数是对象、数值或布尔值，则调用它们的
toString() 方法以获取字符串，然后再应用前面的关于字符
串的规则。对于 undefined 和 null ，则调用 String() 函
数，分别获取 "undefined" 和 "null" 。
2. 减法操作符
减法操作符（ - ）也是使用很频繁的一种操作符，比如：
let result = 2 - 1;
与加法操作符一样，减法操作符也有一组规则用于处理
ECMAScript中不同类型之间的转换
如果两个操作数都是数值，则执行数学减法运算并返回结
果。
如果有任一操作数是 NaN ，则返回 NaN 。
如果是 Infinity 减 Infinity ，则返回 NaN 。
如果是 -Infinity 减 -Infinity ，则返回 NaN 。
如果是 Infinity 减 -Infinity ，则返回 Infinity 。
如果是 -Infinity 减 Infinity ，则返回 -
Infinity 。
如果是 +0 减 +0 ，则返回 +0 。
如果是 +0 减 -0 ，则返回 -0 。
如果是 -0 减 -0 ，则返回 +0 。
如果有任一操作数是字符串、布尔值、 null 或
undefined ，则先在后台使用 Number() 将其转换为数
值，然后再根据前面的规则执行数学运算。如果转换结果是
NaN ，则减法计算的结果是 NaN 。
如果有任一操作数是对象，则调用其 valueOf() 方法取得
表示它的数值。如果该值是 NaN ，则减法计算的结果是NaN 。如果对象没有 valueOf() 方法，则调用其
toString() 方法，然后再将得到的字符串转换为数值。
25、关系操作符
关系操作符执行比较两个值的操作，包括小于（ < ）、大于
（ > ）、小于等于（ <= ）和大于等于（ >= ），用法跟数学课上学
的一样。这几个操作符都返回布尔值，
26、相等操作符
判断两个变量是否相等是编程中最重要的操作之一。在比较字符
串、数值和布尔值是否相等时，过程都很直观。但是在比较两个对象
是否相等时，情形就比较复杂了。ECMAScript中的相等和不相等操作
符，原本在比较之前会执行类型转换，但很快就有人质疑这种转换是
否应该发生。最终，ECMAScript提供了两组操作符。第一组是等于和
不等于，它们在比较之前执行转换。第二组是全等和不全等，它们在
比较之前不执行转换
下表总结了一些特殊情况及比较的结果。
表达式
结果
null == undefined
true
"NaN" == NaN
false
5 == NaN
false
NaN == NaN
false
NaN != NaN
true
false == 0
true
true == 1
true
true == 2
false
undefined == 0
false
null == 0
false
"5" == 5
true
2. 全等和不全等
全等和不全等操作符与相等和不相等操作符类似，只不过它们在
比较相等时不转换操作数。全等操作符由3个等于号（ === ）表
示，只有两个操作数在不转换的前提下相等才返回 true ，
26、条件操作符
条件操作符是ECMAScript中用途最为广泛的操作符之一，语法跟
Java中一样
variable = boolean_expression ? true_value :
false_value;
上面的代码执行了条件赋值操作，即根据条件表达式
boolean_expression 的值决定将哪个值赋给变量 variable 。
如果 boolean_expression 是 true ，则赋值 true_value ；
如果 boolean_expression 是 false ，则赋值
false_value 。
27、赋值操作符
简单赋值用等于号（ = ）表示，将右手边的值赋给左手边的变
量，如下所示：
let num = 10;复合赋值使用乘性、加性或位操作符后跟等于号（ = ）表示。这
些赋值操作符是类似如下常见赋值操作的简写形式：
let num = 10;
num = num + 10;
每个数学操作符以及其他一些操作符都有对应的复合赋值操作
符：
乘后赋值（ *= ）
除后赋值（ /= ）
取模后赋值（ %= ）
加后赋值（ += ）
减后赋值（ -= ）
左移后赋值（ <<= ）
右移后赋值（ >>= ）
无符号右移后赋值（ >>>= ）
这些操作符仅仅是简写语法，使用它们不会提升性能
28、逗号操作符
逗号操作符可以用来在一条语句中执行多个操作，如下所示：let num1 = 1, num2 = 2, num3 = 3;
在一条语句中同时声明多个变量是逗号操作符最常用的场景。不
过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分
隔值，最终会返回表达式中最后一个值
29、语句
ECMA-262描述了一些语句（也称为流控制语句），而
ECMAScript中的大部分语法都体现在语句中。语句通常使用一或多个
关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉
函数退出，复杂的如列出一堆要重复执行的指令。
























