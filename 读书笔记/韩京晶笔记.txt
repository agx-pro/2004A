书后总结
第一章
JS是一门用来网页交互的脚本语言。
有三组成部分：ECMAScript、文档对象模型（DOM）、浏览器对象模型（BOM）
第二章	HTML中的JavaScript
JavaScript是通过script元素插入到HTML页面中的。
第三章	语言基础
ECMAScript中一切都区分大小写，他的标识符使用驼峰大小写模式。
注意：关键字、保留字、true、false和null不能作为标识符。
定义多个变量，可以用逗号分隔开每个变量
暂时性死区
数据类型：undefined.null.boolean.number.string.symbol。还有一种object
object的属性和方法：constructor.hasOwnProperty.isPrototypeof.propertyIsEnumerable.toLocaleString.toString.valueOf。
一元操作符
只操作一个值得操作符叫一元操作符，它是ECMAScript中最简单的操作符。
ECMAScript包含所有基本语法、操作符、数据类型和对象，能完成基本的计算任务，但没提供获得输入和产生输出的机制。
严格模式为这门语言中某些容易出错的部分施加了限制。
不指定返回值的函数实际上会返回特殊值 undefined
第四章 变量、作用域与内存
变量就是特定时间点一个特定值的名称
4.1   原始值与引用值
原始值就是最简单的数据，引用值则是由多个值构成的对象。保存原始值的变量是按值访问的，我们操作的就是存储在变量中实际值
ECMAScript中函数的参数就是局部变量。
所有的引用值都是object的实例
4.2   执行上下文与作用域
执行上下文都有一个关联的变量对象
上下文中的代码在执行的时候，会创建变量对象的一个作用域链，这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序。代码正在执行的上下文的变量对象始终位于作用域链的最前端，如果上下文是函数，则其活动对象用作变量对象。活动对象最初只有一个定义变量
4.2.2 变量声明
\1使用var的函数作用域声明
注意：在初始化变量前一定要先声明变量
\2使用let的块级作用域声明
let的行为适合在循环中声明迭代变量
\3使用const的声明变量
4.3  垃圾回收
JavaScript最常用的垃圾回收策略是标记清理
4.3.2  引用计数
引用计数就是对象A有一个指针指向对象B，B也指向了A
4.3.4  内存管理
\1通过const和let声明提升性能
\2隐藏和删除操作
\3内存泄漏

静态分类是优化的一种极端形式，可以用它提升性能
小结：JavaScript变量可以保存两种类型的值：原始值和引用值。原始值可能是以?6种原始数据类型之一： Undefined 、 Null 、Boolean 、 Number 、 String 和 Symbol 。原始值和引用值有以下特点。
原始值大小固定，因此保存在栈内存上。
从一个变量到另一个变量复制原始值会创建该值的第二个副本。
引用值是对象，存储在堆内存上。
包含引用值的变量实际上只包含指向相应对象的一个指针，而不
是对象本身。
从一个变量到另一个变量复制引用值只会复制指针，因此结果是
两个变量都指向同一个对象。
typeof 操作符可以确定值的原始类型，而 instanceof 操作
符用于确保值的引用类型。
JavaScript的垃圾回收程序
离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除。
主流的垃圾回收算法是标记清理，即先给当前不使用的值加上标记，再回来回收它们的内存。
引用计数是另一种垃圾回收策略，需要记录值被引用了多少次。
JavaScript引擎不再使用这种算法，但某些旧版本的IE仍然会受这
种算法的影响，原因是JavaScript会访问非原生JavaScript对象（如
DOM元素）。
引用计数在代码中存在循环引用时会出现问题。
解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用。


