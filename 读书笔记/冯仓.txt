1.javascript的诞生：==============================================
1995年，JavaScript问世。当时，它的主要用途是代替Perl等服务
器端语言处理输入验证。网景与微软的战争开始
JavaScript是一门用来与网页交互的脚本语言，包含以下三个组成
部分。
ECMAScript：由ECMA-262定义并提供核心功能。
文档对象模型（DOM）：提供与网页内容交互的方法和接口。
浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。
JavaScript的这三个部分得到了五大Web浏览器（IE、Firefox、
Chrome、Safari和Opera）不同程度的支持。所有浏览器基本上对
ES5（ECMAScript 5）提供了完善的支持，而对ES6（ECMAScript 6） 和ES7
（ECMAScript 7）的支持度也在不断提升。

2.HTML中的JavaScript==============================================
异步执行脚本=============
HTML5为 <script> 元素定义了 async 属性。从改变脚本处
理方式上看， async 属性与 defer 类似。当然，它们两者也都只
适用于外部脚本，都会告诉浏览器立即开始下载。不过，与 defer
不同的是，标记为 async 的脚本并不保证能按照它们出现的次序执
行，

推迟执行脚本


动态加载脚本==============
除了 <script> 标签，还有其他方式可以加载脚本。因为
JavaScript可以使用DOM API，所以通过向DOM中动态添加 script
元素同样可以加载指定的脚本。只要创建一个 script 元素并将其添
加到DOM即可。

JavaScript是通过 <script> 元素插入到HTML页面中的。这个
元素可用于把JavaScript代码嵌入到HTML页面中，跟其他标记混合在
一起，也可用于引入保存在外部文件中的JavaScript。本章的重点可以
总结如下。
要包含外部JavaScript文件，必须将 src 属性设置为要包含文件
的URL。文件可以跟网页在同一台服务器上，也可以位于完全不
同的域。
行内代码与外部文件===========
可维护性，缓存，适应未来
文档模式==========
IE5.5发明了文档模式的概念，即可以使用 doctype 切换文档模
式。最初的文档模式有两种：混杂模式（quirks mode）和标准模式
（standards mode）。前者让IE像IE5一样（支持一些非标准的特
性），后者让IE具有兼容标准的行为。虽然这两种模式的主要区别只
体现在通过CSS渲染的内容方面，但对JavaScript也有一些关联影响，
或称为副作用。本书会经常提到这些副作用。
IE初次支持文档模式切换以后，其他浏览器也跟着实现了。随着
浏览器的普遍实现，又出现了第三种文档模式：准标准模式（almost
standards mode）。这种模式下的浏览器支持很多标准的特性，但是没
有标准规定得那么严格。主要区别在于如何对待图片元素周围的空白
（在表格中使用图片时最明显）。

所有 <script> 元素会依照它们在网页中出现的次序被解释。
在不使用 defer 和 async 属性的情况下，包含在 <script>
元素中的代码必须严格按次序解释。
对不推迟执行的脚本，浏览器必须解释完位于 <script> 元素
中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该
把 <script> 元素放到页面末尾，介于主内容之后及
</body> 标签之前。
可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推
迟的脚本总是按照它们被列出的次序执行。
可以使用 async 属性表示脚本不需要等待其他脚本，同时也不
阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面
中出现的次序执行。
通过使用 <noscript> 元素，可以指定在浏览器不支持脚本时
显示的内容。如果浏览器支持并启用脚本，则 <noscript> 元
素中的任何内容都不会被渲染。

3.语法：==============================================
本章内容
语法
数据类型
流控制语句
理解函数

数据类型：==============
ECMAScript有6种简单数据类型（也称为原始类型）：
Undefined 、 Null 、 Boolean 、 Number 、 String 和 Symbol 。 Symbol （符号）是ECMAScript 6新增的。还有一种复
杂数据类型叫 Object （对象）。
操作符==============
1. 递增/递减操作符
如果将一元减应用到非数值，则会执行与使用 Number() 转型
函数一样的类型转换：布尔值 false 和 true 转换为0和1，字
符串根据特殊规则进行解析，对象会调用它们的 valueOf() 和/ 或 toString() 方法以得到可以转换的值。
2. 一元加和减
一元加和减操作符对大多数开发者来说并不陌生，它们在
ECMAScript中跟在高中数学中的用途一样。一元加由一个加号
（ + ）表示，放在变量前头，对数值没有任何影响
if 语句===========
 if 语句是使用最频繁的语句之一，语法如下：
if (condition) statement1 else statement2
这里的条件（ condition ）可以是任何表达式，并且求值结果
不一定是布尔值。ECMAScript会自动调用 Boolean() 函数将这个表
达式的值转换为布尔值。如果条件求值为 true ，则执行语句
statement1 ；如果条件求值为 false ，则执行语句
statement2 。这里的语句可能是一行代码，也可能是一个代码块
（即包含在一对花括号中的多行代码）。
函数==========
函数对任何语言来说都是核心组件，因为它们可以封装语句，然
后在任何地方、任何时间执行。ECMAScript中的函数使用
function 关键字声明，后跟一组参数，然后是函数体
JavaScript的核心语言特性在ECMA-262中以伪语言ECMAScript的
形式来定义。ECMAScript包含所有基本语法、操作符、数据类型和对
象，能完成基本的计算任务，但没有提供获得输入和产生输出的机
制。理解ECMAScript及其复杂的细节是完全理解浏览器中JavaScript的
关键。下面总结一下ECMAScript中的基本元素。
ECMAScript中的基本数据类型包括 Undefined 、 Null 、 Boolean 、 Number 、
 String 和 Symbol 。



