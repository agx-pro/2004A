1  关键字保留字
            CMA-262描述了一组保留的关键字，这些关键字有特殊用途，
     比如表示控制语句的开始和结束，或者执行特定的操作。按照规定，
     保留的关键字不能用作标识符或属性名
      break do in typeof case else instanceof var  catch  export  new ......

2   var    let  const 区别
   使用var时，这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部
   let跟var的作用差不多，但有着非常重要的区别。最明显的区别是，let声明的范围是块作用域，而var声明的范围是函数作用域，let与var的另一个重要的区别，
就是let声明的变量不会在作用域中被提升在let出现之前，for循环定义的迭代变量会渗透到循环体外，改成使用let之后，这个问题就消失了，因为迭代变量的作
用域仅限于for循环块内部
    const的行为与let基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改const声明的变量会导致运行时错误。const声明的限制
只适用于它指向的变量的引用。换句话说， 如果const变量引用的是一个对象，那么修改这个对象内部的属性并不违反const的限制。

3     数据类型
   ECMAScript有6种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String和Symbol。Symbol（符号）是ECMAScript 6新增的。
还有一种复杂数据类型叫Object（对象）。Object是一种无序名值对的集合。因为在ECMAScript中不能定义自己的数据类型，所有值都可以用上述7种数据类型之
一来表示。只有7种数据类型似乎不足以表示全部数据。但ECMAScript的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。

4   typeof   undefined  null  boolean   number  string  Symbol
   typeof 对于基本数据类型判断是没有问题的，但是遇到引用数据类型（如：Array）是不起作用
   Undefined类型只有一个值，就是特殊值undefined。当使用var或let声明了变量但没有初始化时，就相当于给变量赋予了undefined值
   Null类型同样只有一个值，即特殊值null。逻辑上讲，null值表示一个空对象指针，这也是给typeof传一个null会返回"object"的原因
   Boolean（布尔值）类型是ECMAScript中使用最频繁的类型之一，有两个字面值：true和false
   string字符串是不可变的，意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量
转换字符串方法 toString和string函数两种方法。
   Symbol（符号）是ECMAScript 6新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。Symbol.hasInstance   Symbol.isConcatSpreadable   Symbol.iterator
Symbol.match     Symbol.replace   Symbol.search  Symbol.species   Symbol.split  Symbol.toPrimitive   Symbol.toStringTag   Symbol.unscopables


5  Object类型
    ECMAScript中的对象其实就是一组数据和功能的集合。对象通过new操作符后跟对象类型的名称来创建。开发者可以通过创建Object类型的实例来创建自己的对象，然后再给
对象添加属性和方法
   object的实例本身并不是很有用，但理解与它相关的概念非常重要。类似Java中的java.lang.Object，ECMAScript中的Object也是派生其他对象的基类。Object类型的所有属性和
方法在派生的对象上同样存在


6 操作符
   一元操作符   位操作符（不太明白） 布尔操作符（逻辑与和逻辑或）  乘性操作符   指数操作符   加性操作符   关系操作符   相等操作符   条件操作符   赋值操作符  逗号操作符


7 语句
   if语句是使用最频繁的语句之一     do-while语句   while语句     for语句    for-in语句     for-of语句     标签语句      break和continue语句    with语句     switch语句


8函数
  函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。要注意的是，只要碰到return语句，函数就会立即停止执行并退出。
