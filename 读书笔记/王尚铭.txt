	JavaScript前言
  Brendan Eich 只用 10 天就写出了 JavaScript 的第一版。

  JavaScript 并不是一门真正有内聚力的编程语言，至少形式上不是。ECMA-262 规范定义了 JavaScript，但JavaScript 没有唯一正确的实现

  1995年，JavaScript问世。当时，它的主要用途是代替Perl等服务器端语言处理输入验证。

	文档对象模型：
  DOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API，可以轻松地删除、添加、替换、修改节点。

	DOM Level 2新增了以下模块，以支持新的接口。DOM视图：描述追踪文档不同视图（如应用CSS样式前后的文档）的接口。DOM事件：描述事件及事件处理的接口。DOM样式：描述处理元素CSS样式的接口。DOM遍历和范围：描述遍历和操作DOM树的接口。

	BOM：
   IE3和Netscape Navigator 3提供了浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口。
  BOM主要针对浏览器窗口和子窗口（frame）
	BOM扩展：
	弹出新浏览器窗口的能力；移动、缩放和关闭浏览器窗口的能力；
	navigator对象，提供关于浏览器的详尽信息；
	location对象，提供浏览器加载页面的详尽信息；
	screen对象，提供关于用户屏幕分辨率的详尽信息；
	performance对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；对cookie的支持；
	其他自定义对象，如XMLHttpRequest和IE的ActiveXObject。

	总结一：
ECMAScript：由ECMA-262定义并提供核心功能。文档对象模型（DOM）：提供与网页内容交互的方法和接口。浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。
有五大浏览器得到认可：IE、Firefox、Chrome、Safari和Opera

	HTML中的JavaScript：
将JavaScript插入HTML的主要方法是使用<script>元素。有8个属性：
	async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。
	charset：可选。使用src属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。
	crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。
	defer：可选。表示在文档解析和显示完成后再执行脚本是没有问题的。只对外部脚本文件有效。在IE7及更早的版本中，对行内脚本也可以指定这个属性。
	integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Intergrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。
	language：废弃。最初用于表示代码块中的脚本语言（如"JavaScript"、"JavaScript1.2"或"VBScript"）。大多数浏览器都会忽略这个属性，不应该再使用它。
	src：可选。表示包含要执行的代码的外部文件。
	type：可选。代替language，表示代码块中脚本语言的内容类型（也称MIME类型）。
	按照惯例，外部JavaScript文件的扩展名是.js。这不是必需的，因为浏览器不会检查所包含JavaScript文件的扩展名。

	要包含外部文件中的JavaScript，就必须使用src属性。这个属性的值是一个URL，指向包含JavaScript代码的文件，比如：<scriptsrc="example.js"></script>

	在HTML中，解析<script>元素会应用特殊规则。
	XHTML中则没有这些规则。
	这意味着a<b <会被解释成一个标签 会语法错误

	语法：
	区分大小写（typeof与Typeof中第一个是关键字，第2个是一个完全有效的函数名）
	标识符所谓标识符，就是变量、函数、属性或函数参数的名称。标识符可以由一或多个下列字符组成：
	注释：//单行注释   /*这是多行注释*/
	严格模式：我的理解就是少一个字都不行，必报错。
	var关键字： var声明作用域   var声明提升   
	let声明let跟var的作用差不多，但有着非常重要的区别。最明显的区别是，let声明的范围是块作用域，而var声明的范围是函数作用域。
	 暂时性死区let与var的另一个重要的区别，就是let声明的变量不会在作用域中被提升。
	t声明，只不过在此之前不能以任何方式来引用未声明的变量。在let声明之前的执行瞬间被称为“暂时性死区”（temporal deadzone），在此阶段引用任何后面才声明的变量都会抛出ReferenceError。
	全局声明与var关键字不同，使用let在全局作用域中声明的变量不会成为window对象的属性（var声明的变量则会）。
	for循环中的let声明在let出现之前，for循环定义的迭代变量会渗透到循环体外部：
	const声明const的行为与let基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改const声明的变量会导致运行时错误。const声明的限制只适用于它指向的变量的引用。换句话说，如果const变量引用的是一个对象，那么修改这个对象内部的属性并不违反const的限制。
	数据类型：ECMAScript有6种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String和Symbol。Symbol（符号）是ECMAScript 6新增的。还有一种复杂数据类型叫Object（对象）。
	typeof操作符因为ECMAScript的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。
	"undefined"表示值未定义；
	"boolean"表示值为布尔值；
	"string"表示值为字符串；
	"number"表示值为数值；
	"object"表示值为对象（而不是函数）或null；
	"function"表示值为函数；
	"symbol"表示值为符号。
	操作符：一元操作符只操作一个值的操作符叫一元操作符（unary operator）。一元操作符是ECMAScript中最简单的操作符。
	递增/递减操作符：前缀递增操作符会给数值加1，把两个加号（++）放到变量前头即可：
	一元加和减：一元减由一个减号（-）表示，放在变量前头，主要用于把数值变成负值，如把1转换为-1。
	语句：if语句  do-while语句do-while语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。
	while语句while语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。
	for语句for语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式
	for-in语句for-in语句是一种严格的迭代语句，用于枚举对象中的非符号键属性
	for(propertyinexpression)statement
	for-of语句是一种严格的迭代语句，用于遍历可迭代对象的元素
	break和continue语句为执行循环代码提供了更严格的控制手段。其中，break语句用于立即退出循环，强制执行循环后的下一条语句。而continue语句也用于立即退出循环，但会再次从循环顶部开始执行。
	with语句的用途是将代码作用域设置为特定的对象，其语法是：with(expression)statement;
	switch语句是与if语句紧密相关的一种流控制语句，从其他语言借鉴而来。
	函数：函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript中的函数使用function关键字声明，后跟一组参数，然后是函数体。
	这个diff()函数用于计算两个数值的差。return语句也可以不带返回值。这时候，函数会立即停止执行并返回undefined。
	严格模式对函数也有一些限制：
	函数不能以eval或arguments作为名称；
	函数的参数不能叫eval或arguments；
	两个函数的参数不能叫同一个名称。
	总结：
	ECMAScript中的基本数据类型包括Undefined、Null、Boolean、Number、String和Symbol。
ECMAScript不区分整数和浮点值
	Number一种数值数据类型。Object是一种复杂数据类型，它是这门语言中所有对象的基类。


	总的来说：这些都是我所明白的，具体例子也在浏览器实验过了，这里有我自己手敲的理解，也有直接借过来的官方理解，但是都比较容易理解，基本学过的常用类型，和提过的都有了，但是比较偏僻的，不常用的，可能我有部分没有写，主要是没用过，下手比较有点费劲，但是，幸好自己之前学过的内容还没落下，理解接受还快一点。